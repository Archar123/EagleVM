# This file is automatically generated from cmake.toml - DO NOT EDIT
# See https://github.com/build-cpp/cmkr for more information

cmake_minimum_required(VERSION 3.15)

if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
	message(FATAL_ERROR "In-tree builds are not supported. Run CMake from a separate directory: cmake -B build")
endif()

set(CMKR_ROOT_PROJECT OFF)
if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
	set(CMKR_ROOT_PROJECT ON)

	# Bootstrap cmkr and automatically regenerate CMakeLists.txt
	include(cmkr.cmake OPTIONAL RESULT_VARIABLE CMKR_INCLUDE_RESULT)
	if(CMKR_INCLUDE_RESULT)
		cmkr()
	endif()

	# Enable folder support
	set_property(GLOBAL PROPERTY USE_FOLDERS ON)

	# Create a configure-time dependency on cmake.toml to improve IDE support
	configure_file(cmake.toml cmake.toml COPYONLY)
endif()

# Options
option(BUILD_TESTS "" OFF)

project(EagleVM)

# Subdirectory: deps
set(CMKR_CMAKE_FOLDER ${CMAKE_FOLDER})
if(CMAKE_FOLDER)
	set(CMAKE_FOLDER "${CMAKE_FOLDER}/deps")
else()
	set(CMAKE_FOLDER deps)
endif()
add_subdirectory(deps)
set(CMAKE_FOLDER ${CMKR_CMAKE_FOLDER})

# Target: EagleVM
set(EagleVM_SOURCES
	"EagleVM/EagleVM.cpp"
	"EagleVM/source/disassembler/disassembler.cpp"
	"EagleVM/source/disassembler/models/basic_block.cpp"
	"EagleVM/source/obfuscation/mba/math/mba_math.cpp"
	"EagleVM/source/obfuscation/mba/mba.cpp"
	"EagleVM/source/obfuscation/mba/mba_gen.cpp"
	"EagleVM/source/obfuscation/mba/variable/mba_const.cpp"
	"EagleVM/source/obfuscation/mba/variable/mba_exp.cpp"
	"EagleVM/source/obfuscation/mba/variable/mba_var.cpp"
	"EagleVM/source/obfuscation/mba/variable/mba_xy.cpp"
	"EagleVM/source/pe/packer/pe_packer.cpp"
	"EagleVM/source/pe/pe_generator.cpp"
	"EagleVM/source/pe/pe_parser.cpp"
	"EagleVM/source/pe/pe_sections/pe_code_section.cpp"
	"EagleVM/source/pe/pe_sections/pe_handler_section.cpp"
	"EagleVM/source/util/section/code_label.cpp"
	"EagleVM/source/util/section/function_container.cpp"
	"EagleVM/source/util/section/section_manager.cpp"
	"EagleVM/source/util/util.cpp"
	"EagleVM/source/util/zydis_helper.cpp"
	"EagleVM/source/virtual_machine/base_instruction_virtualizer.cpp"
	"EagleVM/source/virtual_machine/handlers/handlers/base_handler_entry.cpp"
	"EagleVM/source/virtual_machine/handlers/handlers/inst_handler_entry.cpp"
	"EagleVM/source/virtual_machine/handlers/handlers/vm_handler_entry.cpp"
	"EagleVM/source/virtual_machine/handlers/ia32_handlers/add.cpp"
	"EagleVM/source/virtual_machine/handlers/ia32_handlers/dec.cpp"
	"EagleVM/source/virtual_machine/handlers/ia32_handlers/div.cpp"
	"EagleVM/source/virtual_machine/handlers/ia32_handlers/imul.cpp"
	"EagleVM/source/virtual_machine/handlers/ia32_handlers/inc.cpp"
	"EagleVM/source/virtual_machine/handlers/ia32_handlers/lea.cpp"
	"EagleVM/source/virtual_machine/handlers/ia32_handlers/mov.cpp"
	"EagleVM/source/virtual_machine/handlers/ia32_handlers/movsx.cpp"
	"EagleVM/source/virtual_machine/handlers/ia32_handlers/mul.cpp"
	"EagleVM/source/virtual_machine/handlers/ia32_handlers/pop.cpp"
	"EagleVM/source/virtual_machine/handlers/ia32_handlers/push.cpp"
	"EagleVM/source/virtual_machine/handlers/ia32_handlers/sub.cpp"
	"EagleVM/source/virtual_machine/handlers/vm_handle_generator.cpp"
	"EagleVM/source/virtual_machine/handlers/vm_handler_context.cpp"
	"EagleVM/source/virtual_machine/handlers/vm_handlers/vm_enter.cpp"
	"EagleVM/source/virtual_machine/handlers/vm_handlers/vm_exit.cpp"
	"EagleVM/source/virtual_machine/handlers/vm_handlers/vm_load.cpp"
	"EagleVM/source/virtual_machine/handlers/vm_handlers/vm_pop_rflags.cpp"
	"EagleVM/source/virtual_machine/handlers/vm_handlers/vm_push_rflags.cpp"
	"EagleVM/source/virtual_machine/handlers/vm_handlers/vm_store.cpp"
	"EagleVM/source/virtual_machine/handlers/vm_handlers/vm_trash_rflags.cpp"
	"EagleVM/source/virtual_machine/vm_generator.cpp"
	"EagleVM/source/virtual_machine/vm_register_manager.cpp"
	cmake.toml
)

add_executable(EagleVM)

target_sources(EagleVM PRIVATE ${EagleVM_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${EagleVM_SOURCES})

target_compile_features(EagleVM PRIVATE
	cxx_std_23
)

if(MSVC) # msvc
	target_compile_options(EagleVM PRIVATE
		"/MP"
		"/permissive-"
		"/sdl"
		"/W3"
		"/Zc:inline"
		"/Zc:wchar_t"
		"$<$<CONFIG:Debug>:/FC;/JMC>"
		"$<$<NOT:$<CONFIG:Debug>>:/Gy;/O1;/Os>"
	)
endif()

target_include_directories(EagleVM PRIVATE
	"EagleVM/headers"
)

target_link_libraries(EagleVM PRIVATE
	Zydis
	bigint
)

if(MSVC) # msvc
	target_link_options(EagleVM PRIVATE
		"/INCREMENTAL:NO"
	)
endif()

get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
if(NOT CMKR_VS_STARTUP_PROJECT)
	set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT EagleVM)
endif()

# Target: EagleVMStub
set(EagleVMStub_SOURCES
	"EagleVM.Stub/EagleVMStub.cpp"
	"EagleVM.Stub/dllmain.cpp"
	cmake.toml
)

add_library(EagleVMStub SHARED)

target_sources(EagleVMStub PRIVATE ${EagleVMStub_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${EagleVMStub_SOURCES})

target_compile_features(EagleVMStub PUBLIC
	cxx_std_23
)

target_include_directories(EagleVMStub PUBLIC
	"EagleVM.Stub/Headers"
)

# Target: EagleVMSandbox
set(EagleVMSandbox_SOURCES
	"EagleVM.Sandbox/EagleVMSandbox.cpp"
	cmake.toml
)

add_executable(EagleVMSandbox)

target_sources(EagleVMSandbox PRIVATE ${EagleVMSandbox_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${EagleVMSandbox_SOURCES})

target_compile_features(EagleVMSandbox PRIVATE
	cxx_std_23
)

target_link_libraries(EagleVMSandbox PRIVATE
	EagleVMStub
)

get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
if(NOT CMKR_VS_STARTUP_PROJECT)
	set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT EagleVMSandbox)
endif()

